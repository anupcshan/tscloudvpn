// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ping.sql

package db

import (
	"context"
	"database/sql"
)

const getRecentPings = `-- name: GetRecentPings :many
SELECT
  hostname, timestamp, success, latency_ms, connection_type, provider_name, region_code
FROM ping_records
WHERE hostname = ?
ORDER BY timestamp DESC
LIMIT ?
`

type GetRecentPingsParams struct {
	Hostname string
	Limit    int64
}

type GetRecentPingsRow struct {
	Hostname       string
	Timestamp      int64
	Success        bool
	LatencyMs      sql.NullInt64
	ConnectionType sql.NullString
	ProviderName   sql.NullString
	RegionCode     sql.NullString
}

func (q *Queries) GetRecentPings(ctx context.Context, arg GetRecentPingsParams) ([]GetRecentPingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentPings, arg.Hostname, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentPingsRow
	for rows.Next() {
		var i GetRecentPingsRow
		if err := rows.Scan(
			&i.Hostname,
			&i.Timestamp,
			&i.Success,
			&i.LatencyMs,
			&i.ConnectionType,
			&i.ProviderName,
			&i.RegionCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPing = `-- name: InsertPing :exec
INSERT INTO ping_records (
  hostname, timestamp, success, latency_ms, connection_type, provider_name, region_code
) VALUES (?, ?, ?, ?, ?, ?, ?)
`

type InsertPingParams struct {
	Hostname       string
	Timestamp      int64
	Success        bool
	LatencyMs      sql.NullInt64
	ConnectionType sql.NullString
	ProviderName   sql.NullString
	RegionCode     sql.NullString
}

func (q *Queries) InsertPing(ctx context.Context, arg InsertPingParams) error {
	_, err := q.db.ExecContext(ctx, insertPing,
		arg.Hostname,
		arg.Timestamp,
		arg.Success,
		arg.LatencyMs,
		arg.ConnectionType,
		arg.ProviderName,
		arg.RegionCode,
	)
	return err
}
