// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: stats.sql

package db

import (
	"context"
	"database/sql"
)

const getAllHostnames = `-- name: GetAllHostnames :many
SELECT DISTINCT hostname
FROM ping_records
ORDER BY hostname
`

func (q *Queries) GetAllHostnames(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllHostnames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var hostname string
		if err := rows.Scan(&hostname); err != nil {
			return nil, err
		}
		items = append(items, hostname)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getErrorCounts = `-- name: GetErrorCounts :many
SELECT error_type, COUNT(*)
FROM error_records
WHERE
  hostname = ? AND
  timestamp >= ? AND
  timestamp < ?
GROUP BY error_type
`

type GetErrorCountsParams struct {
	Hostname    sql.NullString
	Timestamp   int64
	Timestamp_2 int64
}

type GetErrorCountsRow struct {
	ErrorType string
	Count     int64
}

func (q *Queries) GetErrorCounts(ctx context.Context, arg GetErrorCountsParams) ([]GetErrorCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getErrorCounts, arg.Hostname, arg.Timestamp, arg.Timestamp_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetErrorCountsRow
	for rows.Next() {
		var i GetErrorCountsRow
		if err := rows.Scan(&i.ErrorType, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getP99Latency = `-- name: GetP99Latency :one
SELECT latency_ms
FROM ping_records
WHERE hostname = ?
ORDER BY latency_ms
LIMIT 1 OFFSET ?
`

type GetP99LatencyParams struct {
	Hostname string
	Offset   int64
}

func (q *Queries) GetP99Latency(ctx context.Context, arg GetP99LatencyParams) (sql.NullInt64, error) {
	row := q.db.QueryRowContext(ctx, getP99Latency, arg.Hostname, arg.Offset)
	var latency_ms sql.NullInt64
	err := row.Scan(&latency_ms)
	return latency_ms, err
}

const getPingSummary = `-- name: GetPingSummary :one
SELECT
  COUNT(*),
  SUM(CASE WHEN success = 1 THEN 1 ELSE 0 END),
  AVG(CASE WHEN success = 1 THEN latency_ms ELSE 0 END)
FROM ping_records
WHERE
  hostname = ? AND
  timestamp >= ? AND
  timestamp < ?
`

type GetPingSummaryParams struct {
	Hostname    string
	Timestamp   int64
	Timestamp_2 int64
}

type GetPingSummaryRow struct {
	Count int64
	Sum   sql.NullFloat64
	Avg   sql.NullFloat64
}

func (q *Queries) GetPingSummary(ctx context.Context, arg GetPingSummaryParams) (GetPingSummaryRow, error) {
	row := q.db.QueryRowContext(ctx, getPingSummary, arg.Hostname, arg.Timestamp, arg.Timestamp_2)
	var i GetPingSummaryRow
	err := row.Scan(&i.Count, &i.Sum, &i.Avg)
	return i, err
}
